else{
points(xVals[j],yVals[j],col='blue')
}
runningIntegral[j] =  (numPointsUnderCurve/j)*boxArea
}
plot(seq(1,maxSamples,1),abs(runningIntegral-numericalIntegral)/numericalIntegral,
type = 'l',col='black',
main="Relative Error in Integral",ylab="Error",
xlab="Num Samples")
monteCarloIntegral = (numPointsUnderCurve/maxSamples)*boxArea;
cat("Monte Carlo Integration", "\t= ",monteCarloIntegral,"\n")
source('~/GitHub/MATH-032/Lab_07/monteCarlo1D.R')
source('~/GitHub/MATH-032/Lab_07/monteCarlo1D.R')
integrand <- function(x) {sqrt(1+1/(2*x))} #<-- Will change based on function
minX = 1;
maxX = 3;
minY = 0;
maxY = 50;
par(mfrow=c(1,2))    # set the plotting area into a 1*2 array
x <- seq(minX,maxX,0.1)
plot(x, integrand(x),type = 'l',
col='black',main="f(x) = sqrt(1+(1/2*x))",ylab="f(x)")
antiDerivative <- function(x) {(4((1/2*x)+1)^(1.5))/3} #<--Will Need to Change
calcIntegral = antiDerivative(maxX) - antiDerivative(minX);
cat("Calculus (By Hand) Integral", "\t= ",calcIntegral,"\n")
soln = integrate(integrand, lower = minX, upper = maxX)
numericalIntegral = soln$value;
cat("Numerical Integration", "\t\t= ",numericalIntegral,"\n")
maxSamples = 500;
xVals=runif(maxSamples,minX,maxX);
yVals=runif(maxSamples,minY,maxY);
runningIntegral = rep(0,maxSamples);
boxArea = (maxX - minX)*(maxY - minY);
numPointsUnderCurve = 0;
for (j in seq(from=1,to=maxSamples,by=1))
{
if(yVals[j] < integrand(xVals[j])){
numPointsUnderCurve = numPointsUnderCurve +1;
points(xVals[j],yVals[j],col='red')
}
else{
points(xVals[j],yVals[j],col='blue')
}
runningIntegral[j] =  (numPointsUnderCurve/j)*boxArea
}
plot(seq(1,maxSamples,1),abs(runningIntegral-numericalIntegral)/numericalIntegral,
type = 'l',col='black',
main="Relative Error in Integral",ylab="Error",
xlab="Num Samples")
monteCarloIntegral = (numPointsUnderCurve/maxSamples)*boxArea;
cat("Monte Carlo Integration", "\t= ",monteCarloIntegral,"\n")
source('~/GitHub/MATH-032/Lab_07/monteCarlo1D.R')
source('~/GitHub/MATH-032/Lab_07/monteCarlo1D.R')
integrand <- function(x) {sqrt(1+1/(2*x))} #<-- Will change based on function
minX = 1;
maxX = 3;
minY = 0;
maxY = 50;
par(mfrow=c(1,2))    # set the plotting area into a 1*2 array
x <- seq(minX,maxX,0.1)
plot(x, integrand(x),type = 'l',
col='black',main="f(x) = sqrt(1+(1/2*x))",ylab="f(x)")
antiDerivative <- function(x) {(4((1/2*x)+1)^(1.5))/3} #<--Will Need to Change
calcIntegral = antiDerivative(maxX) - antiDerivative(minX);
cat("Calculus (By Hand) Integral", "\t= ",calcIntegral,"\n")
soln = integrate(integrand, lower = minX, upper = maxX)
numericalIntegral = soln$value;
cat("Numerical Integration", "\t\t= ",numericalIntegral,"\n")
maxSamples = 5000;
xVals=runif(maxSamples,minX,maxX);
yVals=runif(maxSamples,minY,maxY);
runningIntegral = rep(0,maxSamples);
boxArea = (maxX - minX)*(maxY - minY);
numPointsUnderCurve = 0;
for (j in seq(from=1,to=maxSamples,by=1))
{
if(yVals[j] < integrand(xVals[j])){
numPointsUnderCurve = numPointsUnderCurve +1;
points(xVals[j],yVals[j],col='red')
}
else{
points(xVals[j],yVals[j],col='blue')
}
runningIntegral[j] =  (numPointsUnderCurve/j)*boxArea
}
plot(seq(1,maxSamples,1),abs(runningIntegral-numericalIntegral)/numericalIntegral,
type = 'l',col='black',
main="Relative Error in Integral",ylab="Error",
xlab="Num Samples")
monteCarloIntegral = (numPointsUnderCurve/maxSamples)*boxArea;
cat("Monte Carlo Integration", "\t= ",monteCarloIntegral,"\n")
source('~/GitHub/MATH-032/Lab_07/monteCarlo1D.R')
source('~/GitHub/MATH-032/Lab_07/monteCarlo1D.R')
integrand <- function(x) {sqrt(1+1/(2*x))} #<-- Will change based on function
minX = 1;
maxX = 3;
minY = 0;
maxY = 50;
par(mfrow=c(1,2))    # set the plotting area into a 1*2 array
x <- seq(minX,maxX,0.1)
plot(x, integrand(x),type = 'l',
col='black',main="f(x) = sqrt(1+(1/2*x))",ylab="f(x)")
antiDerivative <- function(x) {(4((1/2*x)+1)^(1.5))/3} #<--Will Need to Change
calcIntegral = antiDerivative(maxX) - antiDerivative(minX);
cat("Calculus (By Hand) Integral", "\t= ",calcIntegral,"\n")
soln = integrate(integrand, lower = minX, upper = maxX)
numericalIntegral = soln$value;
cat("Numerical Integration", "\t\t= ",numericalIntegral,"\n")
maxSamples = 50000;
xVals=runif(maxSamples,minX,maxX);
yVals=runif(maxSamples,minY,maxY);
runningIntegral = rep(0,maxSamples);
boxArea = (maxX - minX)*(maxY - minY);
numPointsUnderCurve = 0;
for (j in seq(from=1,to=maxSamples,by=1))
{
if(yVals[j] < integrand(xVals[j])){
numPointsUnderCurve = numPointsUnderCurve +1;
points(xVals[j],yVals[j],col='red')
}
else{
points(xVals[j],yVals[j],col='blue')
}
runningIntegral[j] =  (numPointsUnderCurve/j)*boxArea
}
plot(seq(1,maxSamples,1),abs(runningIntegral-numericalIntegral)/numericalIntegral,
type = 'l',col='black',
main="Relative Error in Integral",ylab="Error",
xlab="Num Samples")
monteCarloIntegral = (numPointsUnderCurve/maxSamples)*boxArea;
cat("Monte Carlo Integration", "\t= ",monteCarloIntegral,"\n")
source('~/GitHub/MATH-032/Lab_07/monteCarlo1D.R')
source('~/GitHub/MATH-032/Lab_07/monteCarlo1D.R')
source('~/GitHub/MATH-032/Lab_07/monteCarlo1D.R')
source('~/GitHub/MATH-032/Lab_07/monteCarlo1D.R')
source('~/GitHub/MATH-032/Lab_07/monteCarlo1D.R')
source('~/GitHub/MATH-032/Lab_07/monteCarlo1D.R')
source('~/GitHub/MATH-032/Lab_07/monteCarlo1D.R')
source('~/GitHub/MATH-032/Lab_07/monteCarlo1D.R')
integrand <- function(x) {1/(x^2((x^2)+25))} #<-- Will change based on function
minX = 0;
maxX = 1;
minY = 0;
maxY = 50;
par(mfrow=c(1,2))    # set the plotting area into a 1*2 array
x <- seq(minX,maxX,0.1)
plot(x, integrand(x),type = 'l',
col='black',main="f(x) = 1/x^2(x^2+25)",ylab="f(x)")
antiDerivative <- function(x) {(0.04/(x^2))+(-0.04/(x^2)+25)} #<--Will Need to Change
calcIntegral = antiDerivative(maxX) - antiDerivative(minX);
cat("Calculus (By Hand) Integral", "\t= ",calcIntegral,"\n")
soln = integrate(integrand, lower = minX, upper = maxX)
numericalIntegral = soln$value;
cat("Numerical Integration", "\t\t= ",numericalIntegral,"\n")
maxSamples = 5000;
xVals=runif(maxSamples,minX,maxX);
yVals=runif(maxSamples,minY,maxY);
runningIntegral = rep(0,maxSamples);
boxArea = (maxX - minX)*(maxY - minY);
numPointsUnderCurve = 0;
for (j in seq(from=1,to=maxSamples,by=1))
{
if(yVals[j] < integrand(xVals[j])){
numPointsUnderCurve = numPointsUnderCurve +1;
points(xVals[j],yVals[j],col='red')
}
else{
points(xVals[j],yVals[j],col='blue')
}
runningIntegral[j] =  (numPointsUnderCurve/j)*boxArea
}
plot(seq(1,maxSamples,1),abs(runningIntegral-numericalIntegral)/numericalIntegral,
type = 'l',col='black',
main="Relative Error in Integral",ylab="Error",
xlab="Num Samples")
monteCarloIntegral = (numPointsUnderCurve/maxSamples)*boxArea;
cat("Monte Carlo Integration", "\t= ",monteCarloIntegral,"\n")
maxSamples = 5000;
xVals=runif(maxSamples,minX,maxX);
yVals=runif(maxSamples,minY,maxY);
runningIntegral = rep(0,maxSamples);
boxArea = (maxX - minX)*(maxY - minY);
numPointsUnderCurve = 0;
for (j in seq(from=1,to=maxSamples,by=1))
{
if(yVals[j] < integrand(xVals[j])){
numPointsUnderCurve = numPointsUnderCurve +1;
points(xVals[j],yVals[j],col='red')
}
else{
points(xVals[j],yVals[j],col='blue')
}
runningIntegral[j] =  (numPointsUnderCurve/j)*boxArea
}
plot(seq(1,maxSamples,1),abs(runningIntegral-numericalIntegral)/numericalIntegral,
type = 'l',col='black',
main="Relative Error in Integral",ylab="Error",
xlab="Num Samples")
monteCarloIntegral = (numPointsUnderCurve/maxSamples)*boxArea;
cat("Monte Carlo Integration", "\t= ",monteCarloIntegral,"\n")
source('~/GitHub/MATH-032/Lab_07/monteCarlo1D.R')
integrand <- function(x) {1/(x^2((x^2)+25))} #<-- Will change based on function
minX = 0;
maxX = 1;
minY = 0;
maxY = 50;
par(mfrow=c(1,2))    # set the plotting area into a 1*2 array
x <- seq(minX,maxX,0.1)
plot(x, integrand(x),type = 'l',
col='black',main="f(x) = 1/x^2(x^2+25)",ylab="f(x)")
antiDerivative <- function(x) {(0.04/(x^2))+(-0.04/(x^2)+25)} #<--Will Need to Change
calcIntegral = antiDerivative(maxX) - antiDerivative(minX);
cat("Calculus (By Hand) Integral", "\t= ",calcIntegral,"\n")
soln = integrate(integrand, lower = minX, upper = maxX)
numericalIntegral = soln$value;
cat("Numerical Integration", "\t\t= ",numericalIntegral,"\n")
maxSamples = 5000;
xVals=runif(maxSamples,minX,maxX);
yVals=runif(maxSamples,minY,maxY);
runningIntegral = rep(0,maxSamples);
boxArea = (maxX - minX)*(maxY - minY);
numPointsUnderCurve = 0;
for (j in seq(from=1,to=maxSamples,by=1))
{
if(yVals[j] < integrand(xVals[j])){
numPointsUnderCurve = numPointsUnderCurve +1;
points(xVals[j],yVals[j],col='red')
}
else{
points(xVals[j],yVals[j],col='blue')
}
runningIntegral[j] =  (numPointsUnderCurve/j)*boxArea
}
plot(seq(1,maxSamples,1),abs(runningIntegral-numericalIntegral)/numericalIntegral,
type = 'l',col='black',
main="Relative Error in Integral",ylab="Error",
xlab="Num Samples")
monteCarloIntegral = (numPointsUnderCurve/maxSamples)*boxArea;
cat("Monte Carlo Integration", "\t= ",monteCarloIntegral,"\n")
source('~/GitHub/MATH-032/Lab_07/monteCarlo1D.R')
integrand <- function(x) {1/(x^2((x^2)+25))} #<-- Will change based on function
minX = 0;
maxX = 1;
minY = 0;
maxY = 50;
par(mfrow=c(1,2))    # set the plotting area into a 1*2 array
x <- seq(minX,maxX,0.1)
plot(x, integrand(x),type = 'l',
col='black',main="f(x) = 1/x^2(x^2+25)",ylab="f(x)")
antiDerivative <- function(x) {(0.04/(x^2))+(-0.04/(x^2)+25)} #<--Will Need to Change
calcIntegral = antiDerivative(maxX) - antiDerivative(minX);
cat("Calculus (By Hand) Integral", "\t= ",calcIntegral,"\n")
soln = integrate(integrand, lower = minX, upper = maxX)
numericalIntegral = soln$value;
cat("Numerical Integration", "\t\t= ",numericalIntegral,"\n")
maxSamples = 5000;
xVals=runif(maxSamples,minX,maxX);
yVals=runif(maxSamples,minY,maxY);
runningIntegral = rep(0,maxSamples);
boxArea = (maxX - minX)*(maxY - minY);
numPointsUnderCurve = 0;
for (j in seq(from=1,to=maxSamples,by=1))
{
if(yVals[j] < integrand(xVals[j])){
numPointsUnderCurve = numPointsUnderCurve +1;
points(xVals[j],yVals[j],col='red')
}
else{
points(xVals[j],yVals[j],col='blue')
}
runningIntegral[j] =  (numPointsUnderCurve/j)*boxArea
}
plot(seq(1,maxSamples,1),abs(runningIntegral-numericalIntegral)/numericalIntegral,
type = 'l',col='black',
main="Relative Error in Integral",ylab="Error",
xlab="Num Samples")
monteCarloIntegral = (numPointsUnderCurve/maxSamples)*boxArea;
cat("Monte Carlo Integration", "\t= ",monteCarloIntegral,"\n")
source('~/GitHub/MATH-032/Lab_07/monteCarlo1D.R')
integrand <- function(x) {1/(x^2((x^2)+25))} #<-- Will change based on function
integrand
integrand
integrand
integrand <- function(x) {1/(x^2((x^2)+25))} #<-- Will change based on function
minX = 1;
maxX = 5;
minY = 0;
maxY = 50;
par(mfrow=c(1,2))    # set the plotting area into a 1*2 array
x <- seq(minX,maxX,0.1)
plot(x, integrand(x),type = 'l',
col='black',main="f(x) = 1/x^2(x^2+25)",ylab="f(x)")
antiDerivative <- function(x) {(0.04/(x^2))+(-0.04/(x^2)+25)} #<--Will Need to Change
calcIntegral = antiDerivative(maxX) - antiDerivative(minX);
cat("Calculus (By Hand) Integral", "\t= ",calcIntegral,"\n")
soln = integrate(integrand, lower = minX, upper = maxX)
numericalIntegral = soln$value;
cat("Numerical Integration", "\t\t= ",numericalIntegral,"\n")
maxSamples = 5000;
xVals=runif(maxSamples,minX,maxX);
yVals=runif(maxSamples,minY,maxY);
runningIntegral = rep(0,maxSamples);
boxArea = (maxX - minX)*(maxY - minY);
numPointsUnderCurve = 0;
for (j in seq(from=1,to=maxSamples,by=1))
{
if(yVals[j] < integrand(xVals[j])){
numPointsUnderCurve = numPointsUnderCurve +1;
points(xVals[j],yVals[j],col='red')
}
else{
points(xVals[j],yVals[j],col='blue')
}
runningIntegral[j] =  (numPointsUnderCurve/j)*boxArea
}
plot(seq(1,maxSamples,1),abs(runningIntegral-numericalIntegral)/numericalIntegral,
type = 'l',col='black',
main="Relative Error in Integral",ylab="Error",
xlab="Num Samples")
monteCarloIntegral = (numPointsUnderCurve/maxSamples)*boxArea;
cat("Monte Carlo Integration", "\t= ",monteCarloIntegral,"\n")
source('~/GitHub/MATH-032/Lab_07/monteCarlo1D.R')
integrand <- function(x) {1/(x**2((x**2)+25))} #<-- Will change based on function
minX = 1;
maxX = 5;
minY = 0;
maxY = 50;
par(mfrow=c(1,2))    # set the plotting area into a 1*2 array
x <- seq(minX,maxX,0.1)
plot(x, integrand(x),type = 'l',
col='black',main="f(x) = 1/x^2(x^2+25)",ylab="f(x)")
antiDerivative <- function(x) {(0.04/(x^2))+(-0.04/(x^2)+25)} #<--Will Need to Change
calcIntegral = antiDerivative(maxX) - antiDerivative(minX);
source('~/GitHub/MATH-032/Lab_07/monteCarlo1D.R')
source('~/GitHub/MATH-032/Lab_07/monteCarlo1D.R')
source('~/GitHub/MATH-032/Lab_07/monteCarlo1D.R')
source('~/GitHub/MATH-032/Lab_07/monteCarlo1D.R')
source('~/GitHub/MATH-032/Lab_07/monteCarlo1D.R')
source('~/GitHub/MATH-032/Lab_07/monteCarlo1D.R')
source('~/GitHub/MATH-032/Lab_07/monteCarlo1D.R')
source('~/GitHub/MATH-032/Lab_07/monteCarlo1D.R')
source('~/GitHub/MATH-032/Lab_07/monteCarlo1D.R')
source('~/GitHub/MATH-032/Lab_07/monteCarlo1D.R')
source('~/GitHub/MATH-032/Lab_07/monteCarlo1D.R')
source('~/GitHub/MATH-032/Lab_07/monteCarlo1D.R')
source('~/GitHub/MATH-032/Lab_07/monteCarlo1D.R')
integrand <- function(x) {1/(x**2((x**2)+25))} #<-- Will change based on function
minX = 1;
maxX = 5;
minY = 0;
maxY = 50;
par(mfrow=c(1,2))    # set the plotting area into a 1*2 array
x <- seq(minX,maxX,0.1)
plot(x, integrand(x),type = 'l',
col='black',main="f(x) = 1/x^2(x^2+25)",ylab="f(x)")
antiDerivative <- function(x) {(0.04/(x**2))+(-0.04/(x**2)+25)} #<--Will Need to Change
calcIntegral = antiDerivative(maxX) - antiDerivative(minX);
cat("Calculus (By Hand) Integral", "\t= ",calcIntegral,"\n")
soln = integrate(integrand, lower = minX, upper = maxX)
numericalIntegral = soln$value;
cat("Numerical Integration", "\t\t= ",numericalIntegral,"\n")
maxSamples = 5000;
xVals=runif(maxSamples,minX,maxX);
yVals=runif(maxSamples,minY,maxY);
runningIntegral = rep(0,maxSamples);
boxArea = (maxX - minX)*(maxY - minY);
numPointsUnderCurve = 0;
for (j in seq(from=1,to=maxSamples,by=1))
{
if(yVals[j] < integrand(xVals[j])){
numPointsUnderCurve = numPointsUnderCurve +1;
points(xVals[j],yVals[j],col='red')
}
else{
points(xVals[j],yVals[j],col='blue')
}
runningIntegral[j] =  (numPointsUnderCurve/j)*boxArea
}
plot(seq(1,maxSamples,1),abs(runningIntegral-numericalIntegral)/numericalIntegral,
type = 'l',col='black',
main="Relative Error in Integral",ylab="Error",
xlab="Num Samples")
monteCarloIntegral = (numPointsUnderCurve/maxSamples)*boxArea;
cat("Monte Carlo Integration", "\t= ",monteCarloIntegral,"\n")
source('~/GitHub/MATH-032/Lab_07/monteCarlo1D.R')
integrand <- function(x) {1/(x**2((x**2)+25))} #<-- Will change based on function
minX = 1;
maxX = 5;
minY = 0;
maxY = 100;
par(mfrow=c(1,2))    # set the plotting area into a 1*2 array
x <- seq(minX,maxX,0.1)
plot(x, integrand(x),type = 'l',
col='black',main="f(x) = 1/x^2(x^2+25)",ylab="f(x)")
antiDerivative <- function(x) {(0.04/(x**2))+(-0.04/(x**2)+25)} #<--Will Need to Change
calcIntegral = antiDerivative(maxX) - antiDerivative(minX);
cat("Calculus (By Hand) Integral", "\t= ",calcIntegral,"\n")
soln = integrate(integrand, lower = minX, upper = maxX)
numericalIntegral = soln$value;
cat("Numerical Integration", "\t\t= ",numericalIntegral,"\n")
maxSamples = 5000;
xVals=runif(maxSamples,minX,maxX);
yVals=runif(maxSamples,minY,maxY);
runningIntegral = rep(0,maxSamples);
boxArea = (maxX - minX)*(maxY - minY);
numPointsUnderCurve = 0;
for (j in seq(from=1,to=maxSamples,by=1))
{
if(yVals[j] < integrand(xVals[j])){
numPointsUnderCurve = numPointsUnderCurve +1;
points(xVals[j],yVals[j],col='red')
}
else{
points(xVals[j],yVals[j],col='blue')
}
runningIntegral[j] =  (numPointsUnderCurve/j)*boxArea
}
plot(seq(1,maxSamples,1),abs(runningIntegral-numericalIntegral)/numericalIntegral,
type = 'l',col='black',
main="Relative Error in Integral",ylab="Error",
xlab="Num Samples")
monteCarloIntegral = (numPointsUnderCurve/maxSamples)*boxArea;
cat("Monte Carlo Integration", "\t= ",monteCarloIntegral,"\n")
source('~/GitHub/MATH-032/Lab_07/monteCarlo1D.R')
integrand <- function(x) {1/((x**2)*((x**2)+25))} #<-- Will change based on function
minX = 1;
maxX = 5;
minY = 0;
maxY = 100;
par(mfrow=c(1,2))    # set the plotting area into a 1*2 array
x <- seq(minX,maxX,0.1)
plot(x, integrand(x),type = 'l',
col='black',main="f(x) = 1/x^2(x^2+25)",ylab="f(x)")
antiDerivative <- function(x) {(0.04/(x**2))+(-0.04/((x**2)+25))} #<--Will Need to Change
calcIntegral = antiDerivative(maxX) - antiDerivative(minX);
cat("Calculus (By Hand) Integral", "\t= ",calcIntegral,"\n")
soln = integrate(integrand, lower = minX, upper = maxX)
numericalIntegral = soln$value;
cat("Numerical Integration", "\t\t= ",numericalIntegral,"\n")
maxSamples = 50000;
xVals=runif(maxSamples,minX,maxX);
yVals=runif(maxSamples,minY,maxY);
runningIntegral = rep(0,maxSamples);
boxArea = (maxX - minX)*(maxY - minY);
numPointsUnderCurve = 0;
for (j in seq(from=1,to=maxSamples,by=1))
{
if(yVals[j] < integrand(xVals[j])){
numPointsUnderCurve = numPointsUnderCurve +1;
points(xVals[j],yVals[j],col='red')
}
else{
points(xVals[j],yVals[j],col='blue')
}
runningIntegral[j] =  (numPointsUnderCurve/j)*boxArea
}
plot(seq(1,maxSamples,1),abs(runningIntegral-numericalIntegral)/numericalIntegral,
type = 'l',col='black',
main="Relative Error in Integral",ylab="Error",
xlab="Num Samples")
monteCarloIntegral = (numPointsUnderCurve/maxSamples)*boxArea;
cat("Monte Carlo Integration", "\t= ",monteCarloIntegral,"\n")
source('~/GitHub/MATH-032/Lab_07/monteCarlo1D.R')
source('~/GitHub/MATH-032/Lab_07/monteCarlo1D.R')
source('~/GitHub/MATH-032/Lab_07/monteCarlo1D.R')
source('~/GitHub/MATH-032/Lab_07/monteCarlo1D.R')
source('~/GitHub/MATH-032/Lab_07/monteCarlo1D.R')
source('~/GitHub/MATH-032/Lab_07/monteCarlo1D.R')
source('~/GitHub/MATH-032/Lab_07/monteCarlo1D.R')
source('~/GitHub/MATH-032/Lab_07/monteCarlo1D.R')
source('~/GitHub/MATH-032/Lab_07/monteCarlo1D.R')
source('~/GitHub/MATH-032/Lab_07/monteCarlo1D.R')
source('~/GitHub/MATH-032/Lab_07/monteCarlo1D.R')
integrand <- function(x) {1/((x**2)*((x**2)+25))} #<-- Will change based on function
minX = 1;
maxX = 5;
minY = 0;
maxY = 100;
par(mfrow=c(1,2))    # set the plotting area into a 1*2 array
x <- seq(minX,maxX,0.1)
plot(x, integrand(x),type = 'l',
col='black',main="f(x) = 1/x^2(x^2+25)",ylab="f(x)")
antiDerivative <- function(x) {(0.04/(x**2))+(-0.04/((x**2)+25))} #<--Will Need to Change
calcIntegral = antiDerivative(maxX) - antiDerivative(minX);
cat("Calculus (By Hand) Integral", "\t= ",calcIntegral,"\n")
soln = integrate(integrand, lower = minX, upper = maxX)
numericalIntegral = soln$value;
cat("Numerical Integration", "\t\t= ",numericalIntegral,"\n")
maxSamples = 50000;
xVals=runif(maxSamples,minX,maxX);
yVals=runif(maxSamples,minY,maxY);
runningIntegral = rep(0,maxSamples);
boxArea = (maxX - minX)*(maxY - minY);
numPointsUnderCurve = 0;
for (j in seq(from=1,to=maxSamples,by=1))
{
if(yVals[j] < integrand(xVals[j])){
numPointsUnderCurve = numPointsUnderCurve +1;
points(xVals[j],yVals[j],col='red')
}
else{
points(xVals[j],yVals[j],col='blue')
}
runningIntegral[j] =  (numPointsUnderCurve/j)*boxArea
}
plot(seq(1,maxSamples,1),abs(runningIntegral-numericalIntegral)/numericalIntegral,
type = 'l',col='black',
main="Relative Error in Integral",ylab="Error",
xlab="Num Samples")
monteCarloIntegral = (numPointsUnderCurve/maxSamples)*boxArea;
cat("Monte Carlo Integration", "\t= ",monteCarloIntegral,"\n")
source('~/GitHub/MATH-032/Lab_07/monteCarlo1D.R')
